#!/usr/bin/env python3
"""
Script para validar estrutura de PRPs
Valida se um arquivo PRP segue a estrutura correta definida no projeto
"""

import os
import re
import sys
import json
from pathlib import Path
from typing import List, Dict, Tuple


class PRPValidator:
    def __init__(self, config_path: str = "config/templates.json"):
        """Inicializa o validador com configura√ß√µes"""
        self.config_path = config_path
        self.config = self._load_config()
        self.required_sections = self.config.get("validation", {}).get("requiredSections", [])
        self.optional_sections = self.config.get("validation", {}).get("optionalSections", [])
    
    def _load_config(self) -> Dict:
        """Carrega configura√ß√µes do arquivo JSON"""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"‚ùå Arquivo de configura√ß√£o n√£o encontrado: {self.config_path}")
            sys.exit(1)
        except json.JSONDecodeError as e:
            print(f"‚ùå Erro ao ler configura√ß√£o: {e}")
            sys.exit(1)
    
    def validate_file(self, file_path: str) -> Tuple[bool, List[str]]:
        """
        Valida um arquivo PRP
        Retorna (√©_v√°lido, lista_de_problemas)
        """
        if not os.path.exists(file_path):
            return False, [f"Arquivo n√£o encontrado: {file_path}"]
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except UnicodeDecodeError:
            return False, [f"Erro de encoding no arquivo: {file_path}"]
        
        problems = []
        
        # Valida√ß√µes b√°sicas
        problems.extend(self._validate_header(content, file_path))
        problems.extend(self._validate_sections(content, file_path))
        problems.extend(self._validate_structure(content, file_path))
        problems.extend(self._validate_content_quality(content, file_path))
        
        is_valid = len(problems) == 0
        return is_valid, problems
    
    def _validate_header(self, content: str, file_path: str) -> List[str]:
        """Valida o cabe√ßalho do PRP"""
        problems = []
        
        # Verifica se tem t√≠tulo principal
        if not re.search(r'^#\s+.+', content, re.MULTILINE):
            problems.append(f"{file_path}: Falta t√≠tulo principal (come√ßando com #)")
        
        # Verifica metadados b√°sicos
        metadata_patterns = [
            r'\*\*Tipo:\*\*',
            r'\*\*Complexidade:\*\*',
            r'\*\*Tempo Estimado:\*\*',
            r'\*\*Vers√£o:\*\*'
        ]
        
        for pattern in metadata_patterns:
            if not re.search(pattern, content):
                problems.append(f"{file_path}: Falta metadado: {pattern}")
        
        return problems
    
    def _validate_sections(self, content: str, file_path: str) -> List[str]:
        """Valida se√ß√µes obrigat√≥rias"""
        problems = []
        
        # Converte se√ß√µes para padr√µes regex
        required_patterns = [
            r'## üéØ Contexto do Projeto',
            r'## ‚öôÔ∏è Requisitos Funcionais',
            r'## üîß Requisitos T√©cnicos',
            r'## üì¶ Entreg√°veis Esperados'
        ]
        
        for pattern in required_patterns:
            if not re.search(pattern, content):
                problems.append(f"{file_path}: Se√ß√£o obrigat√≥ria faltando: {pattern}")
        
        return problems
    
    def _validate_structure(self, content: str, file_path: str) -> List[str]:
        """Valida estrutura geral do documento"""
        problems = []
        
        # Verifica se tem pelo menos alguns requisitos funcionais (mais flex√≠vel)
        functional_reqs = re.findall(r'### \*\*\[.*?\]\*\*|### \*\*.*?\*\*|\d+\. \*\*.*?\*\*', content)
        if len(functional_reqs) < 1:
            problems.append(f"{file_path}: Deve ter pelo menos 1 requisito funcional detalhado")
        
        # Verifica se tem crit√©rios de aceita√ß√£o
        acceptance_criteria = re.findall(r'- \[ \]', content)
        if len(acceptance_criteria) < 3:
            problems.append(f"{file_path}: Deve ter pelo menos 3 crit√©rios de aceita√ß√£o")
        
        # Verifica se tem estrutura de arquivos
        if not re.search(r'## üìÅ Estrutura de Arquivos', content):
            problems.append(f"{file_path}: Deve incluir se√ß√£o de estrutura de arquivos")
        
        return problems
    
    def _validate_content_quality(self, content: str, file_path: str) -> List[str]:
        """Valida qualidade do conte√∫do"""
        problems = []
        
        # Verifica se n√£o est√° muito vago (mais flex√≠vel para exemplos)
        vague_patterns = [
            r'\[Descreva.*?\]',  # Placeholders de instru√ß√£o n√£o preenchidos
            r'\[Exemplo.*?\]',   # Placeholders de exemplo n√£o preenchidos
            r'\[Adicione.*?\]'   # Placeholders de adi√ß√£o n√£o preenchidos
        ]
        
        vague_count = 0
        for pattern in vague_patterns:
            matches = re.findall(pattern, content, re.IGNORECASE)
            vague_count += len(matches)
        
        # Mais tolerante: s√≥ reclama se tiver muitos placeholders de instru√ß√£o
        if vague_count > 10:
            problems.append(f"{file_path}: Muitos placeholders de instru√ß√£o n√£o preenchidos ({vague_count} encontrados)")
        
        # Verifica se tem exemplos de c√≥digo
        if not re.search(r'```[\s\S]*?```', content):
            problems.append(f"{file_path}: Deveria incluir exemplos de c√≥digo")
        
        return problems
    
    def validate_directory(self, directory_path: str) -> Dict[str, Tuple[bool, List[str]]]:
        """Valida todos os arquivos PRP em um diret√≥rio"""
        results = {}
        directory = Path(directory_path)
        
        # Procura por arquivos .md
        for file_path in directory.rglob("*.md"):
            if file_path.name != "README.md":  # Ignora READMEs
                is_valid, problems = self.validate_file(str(file_path))
                results[str(file_path)] = (is_valid, problems)
        
        return results


def main():
    """Fun√ß√£o principal"""
    if len(sys.argv) < 2:
        print("Uso: python validate_prp.py <arquivo-prp> [diretorio]")
        print("Exemplos:")
        print("  python validate_prp.py examples/my-project.md")
        print("  python validate_prp.py examples/")
        sys.exit(1)
    
    target = sys.argv[1]
    validator = PRPValidator()
    
    if os.path.isfile(target):
        # Valida√ß√£o de arquivo √∫nico
        is_valid, problems = validator.validate_file(target)
        
        if is_valid:
            print(f"‚úÖ {target}: PRP v√°lido!")
        else:
            print(f"‚ùå {target}: PRP inv√°lido!")
            for problem in problems:
                print(f"  ‚Ä¢ {problem}")
            sys.exit(1)
    
    elif os.path.isdir(target):
        # Valida√ß√£o de diret√≥rio
        results = validator.validate_directory(target)
        
        valid_count = 0
        total_count = len(results)
        
        for file_path, (is_valid, problems) in results.items():
            if is_valid:
                print(f"‚úÖ {file_path}")
                valid_count += 1
            else:
                print(f"‚ùå {file_path}")
                for problem in problems:
                    print(f"  ‚Ä¢ {problem}")
        
        print(f"\nüìä Resumo: {valid_count}/{total_count} PRPs v√°lidos")
        
        if valid_count < total_count:
            sys.exit(1)
    
    else:
        print(f"‚ùå Caminho n√£o encontrado: {target}")
        sys.exit(1)


if __name__ == "__main__":
    main()
